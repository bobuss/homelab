version: "3.9"
services:

  traefik:
    image: traefik:v2.9
    container_name: traefik
    restart: always
    command:
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
    ports:
      - 80:80             # traefik
      - 8080:8080         # traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      # - traefik.enable=true
      # - traefik.http.routers.homepage.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/dashboard`))
      # - traefik.http.services.homepage.loadbalancer.server.port=8080
      - homepage.group=Network
      - homepage.name=traefik
      - homepage.icon=traefik.png
      - homepage.href=http://${HOSTNAME}:8080
      - homepage.description=Traefik reverse proxy
      - homepage.weight=1
      - homepage.widget.type=traefik
      - homepage.widget.url=http://traefik:8080

  homepage:
    image: ghcr.io/benphelps/homepage:latest
    container_name: homepage
    environment:
      - HOMEPAGE_VAR_TITLE=${HOMEPAGE_VAR_TITLE}
      - HOMEPAGE_VAR_SEARCH_PROVIDER=${HOMEPAGE_VAR_SEARCH_PROVIDER}
      - HOMEPAGE_VAR_HEADER_STYLE=${HOMEPAGE_VAR_HEADER_STYLE}
      - HOMEPAGE_VAR_WEATHER_CITY=${HOMEPAGE_VAR_WEATHER_CITY}
      - HOMEPAGE_VAR_WEATHER_LAT=${HOMEPAGE_VAR_WEATHER_LAT}
      - HOMEPAGE_VAR_WEATHER_LONG=${HOMEPAGE_VAR_WEATHER_LONG}
      - HOMEPAGE_VAR_WEATHER_TIME=${TIMEZONE}
      - HOMEPAGE_VAR_WEATHER_UNIT=${HOMEPAGE_VAR_WEATHER_UNIT}
    volumes:
      - ./homepage:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DATA_ROOT}:/data
    restart: always
    # command: [sh, -c, "cp -n /app/config/tpl/*.yaml /app/config && node server.js"]
    networks:
      # needed to reach adguard ip in macvlan
      adguard-macvlan:
      default:
    labels:
      - traefik.enable=true
      - traefik.http.routers.homepage.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/`))
      - traefik.http.services.homepage.loadbalancer.server.port=3000

  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./sonarr:/config
      - ${DATA_ROOT}:/data
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`sonarr.${HOSTNAME}`)
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
      - homepage.group=Media
      - homepage.name=Sonarr
      - homepage.icon=sonarr.png
      - homepage.href=http://sonarr.${HOSTNAME}/
      - homepage.description=Series management
      - homepage.weight=0
      - homepage.widget.type=sonarr
      - homepage.widget.url=http://sonarr:8989
      - homepage.widget.key=${SONARR_API_KEY}

  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./radarr:/config
      - ${DATA_ROOT}:/data
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`radarr.${HOSTNAME}`)
      - traefik.http.services.radarr.loadbalancer.server.port=7878
      - homepage.group=Media
      - homepage.name=Radarr
      - homepage.icon=radarr.png
      - homepage.href=http://radarr.${HOSTNAME}/
      - homepage.description=Movies management
      - homepage.weight=1
      - homepage.widget.type=radarr
      - homepage.widget.url=http://radarr:7878
      - homepage.widget.key=${RADARR_API_KEY}

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./prowlarr:/config
    restart: always
    network_mode: "service:vpn"
    depends_on:
      vpn:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.${HOSTNAME}`)
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
      - homepage.group=Media
      - homepage.name=Prowlarr
      - homepage.icon=prowlarr.png
      - homepage.href=http://prowlarr.${HOSTNAME}/
      - homepage.description=Indexers management
      - homepage.weight=4
      - homepage.widget.type=prowlarr
      - homepage.widget.url=http://vpn:9696
      - homepage.widget.key=${PROWLARR_API_KEY}

  vpn:
    image: ghcr.io/bubuntux/nordvpn
    container_name: vpn
    volumes:
      - ./nordvpn:/config
    cap_add:
      - NET_ADMIN               # Required
      - NET_RAW                 # Required
    environment:                # Review https://github.com/bubuntux/nordvpn#environment-variables
      - TOKEN=${NORDVPN_TOKEN}  # Required
      - CONNECT=${NORDVPN_COUNTRY}
      - TECHNOLOGY=NordLynx
      - NET_LOCAL=192.168.1.0/24  # So it can be accessed within the local network
      # add docker dns to /etc/resolv.conf
      - POST_CONNECT="/config/resolv.conf.sh"
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1  # Recomended if using ipv4 only
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:libtorrentv1
    container_name: qbittorrent
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - WEBUI_PORT=8081
    volumes:
      - ./qbittorrent:/config
      - ${DOWNLOAD_ROOT}:/data/torrents
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.${HOSTNAME}`)
      - traefik.http.services.qbittorrent.loadbalancer.server.port=8081
      - homepage.group=Download
      - homepage.name=qBittorrent
      - homepage.icon=qbittorrent.png
      - homepage.href=http://qbittorrent.${HOSTNAME}/
      - homepage.description=Bittorrent client
      - homepage.weight=5
      - homepage.widget.type=qbittorrent
      - homepage.widget.url=http://qbittorrent:8081
      - homepage.widget.username=admin
      - homepage.widget.password=adminadmin

  jellyfin:
    image: lscr.io/linuxserver/jellyfin
    container_name: jellyfin
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - JELLYFIN_PublishedServerUrl=jellyfin.${HOSTNAME}
    volumes:
      - ./jellyfin:/config
      - ${DATA_ROOT}:/data
      - /mnt/Films:/mnt/Films
      - /mnt/Series:/mnt/Series
      - /mnt/Enfants:/mnt/Enfants
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.rule=Host(`jellyfin.${HOSTNAME}`)
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
      - homepage.group=Media
      - homepage.name=Jellyfin
      - homepage.icon=jellyfin.png
      - homepage.href=http://jellyfin.${HOSTNAME}/
      - homepage.description=Media server
      - homepage.weight=3
      - homepage.widget.type=jellyfin
      - homepage.widget.url=http://jellyfin:8096
      - homepage.widget.key=${JELLYFIN_API_KEY}

  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
        - LOG_LEVEL=debug
        - TZ=${TIMEZONE}
    volumes:
      - ./jellyseerr:/app/config
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyseerr.rule=Host(`jellyseerr.${HOSTNAME}`)
      - traefik.http.services.jellyseerr.loadbalancer.server.port=5055
      - homepage.group=Media
      - homepage.name=Jellyseerr
      - homepage.icon=jellyseerr.png
      - homepage.href=http://jellyseerr.${HOSTNAME}/
      - homepage.description=Media server
      - homepage.weight=3
      - homepage.widget.type=jellyseerr
      - homepage.widget.url=http://jellyseerr:5055
      - homepage.widget.key=${JELLYSEERR_API_KEY}

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: always
    environment:
      - WATCHTOWER_CLEANUP=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock


  #
  # Adguard Home lives on its own macvlan network, so it can be reached via ADGUARD_STATIC_IP
  #
  adguardhome:
    image: 'adguard/adguardhome:latest'
    container_name: 'adguard'
    restart: 'unless-stopped'
    ports:
      - 3000:3000/tcp
      - 54:53/tcp
      - 54:53/udp
      - 67:67/udp
      - 67:67/tcp
      - 69:68/tcp
      - 69:68/udp
      - 853:853/tcp
    volumes:
      - ./adguardhome/work:/opt/adguardhome/work
      - ./adguardhome/conf:/opt/adguardhome/conf
    networks:
      adguard-macvlan:
        ipv4_address: ${ADGUARD_STATIC_IP}
      default:
    labels:
      - traefik.enable=true
      - traefik.http.routers.adguardhome.rule=(Host(`adguardhome.${HOSTNAME}`) && PathPrefix(`/`))
      - traefik.http.services.adguardhome.loadbalancer.server.port=3000
      - homepage.group=Utilities
      - homepage.name=AdguardHome
      - homepage.icon=adguard-home.png
      - homepage.href=http://${ADGUARD_STATIC_IP}
      - homepage.description=DNS with blocking capabilities
      - homepage.weight=3
      - homepage.widget.type=adguard
      - homepage.widget.url=http://${ADGUARD_STATIC_IP}
      - homepage.widget.username=${ADGUARD_USERNAME}
      - homepage.widget.password=${ADGUARD_PASSWORD}



networks:
  default:
    name: docker-compose-nas
  adguard-macvlan:
    name: adguard-macvlan
    driver: macvlan
    driver_opts:
      parent: ${MACVLAN_PARENT}
    ipam:
      config:
        - subnet: "${MACVLAN_SUBNET}"
          gateway: "${MACVLAN_GATEWAY}"
