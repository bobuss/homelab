version: "3.9"
services:

  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    environment:
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      - CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}
      - CLOUDFLARE_ZONE_API_TOKEN=${CLOUDFLARE_ZONE_API_TOKEN}
      - LETS_ENCRYPT_EMAIL=${LETS_ENCRYPT_EMAIL}
    command:
      - --log.level=DEBUG
      - --api.insecure=true
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web-secure.address=:443
      - --entrypoints.web.http.redirections.entryPoint.to=web-secure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --certificatesresolvers.myresolver.acme.dnschallenge=${DNS_CHALLENGE:-true}
      - --certificatesresolvers.myresolver.acme.dnschallenge.provider=${DNS_CHALLENGE_PROVIDER:-cloudflare}
      - --certificatesresolvers.myresolver.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      - --certificatesresolvers.myresolver.acme.caserver=${LETS_ENCRYPT_CA_SERVER:-https://acme-v02.api.letsencrypt.org/directory}
      - --certificatesresolvers.myresolver.acme.email=${LETS_ENCRYPT_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    ports:
      - 80:80             # traefik
      - 443:443           # traefik https
      - 8080:8080         # dashboard
    volumes:
      - ./letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      # - traefik.enable=true
      # - traefik.http.routers.homepage.rule=Host(`traefik.${HOSTNAME}`)
      # - traefik.http.routers.sonarr.tls=true
      # - traefik.http.routers.sonarr.tls.certresolver=myresolver
      # - traefik.http.services.homepage.loadbalancer.server.port=8080
      - homepage.group=Utilities
      - homepage.name=traefik
      - homepage.icon=traefik.png
      - homepage.href=http://${HOSTNAME}:8080
      - homepage.description=Traefik reverse proxy
      - homepage.weight=1
      - homepage.widget.type=traefik
      - homepage.widget.url=http://traefik:8080

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    volumes:
      - ./homepage:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DATA_ROOT}:/data
    restart: unless-stopped
    # command: [sh, -c, "cp -n /app/config/tpl/*.yaml /app/config && node server.js"]
    networks:
      # needed to reach adguard ip in macvlan
      adguard-macvlan:
      default:
    labels:
      - traefik.enable=true
      - traefik.docker.network=docker-compose-nas
      - traefik.http.routers.homepage.rule=(Host(`${HOSTNAME}`))
      - traefik.http.routers.homepage.tls=true
      - traefik.http.routers.homepage.tls.certresolver=myresolver
      - traefik.http.services.homepage.loadbalancer.server.port=3000

  # homarr:
  #   container_name: homarr
  #   image: ghcr.io/ajnart/homarr:latest
  #   restart: unless-stopped
  #   volumes:
  #     - ./homarr/configs:/app/data/configs
  #     - ./homarr/icons:/app/public/icons
  #   ports:
  #     - '7575:7575'

  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./sonarr:/config
      - ${DATA_ROOT}:/data
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`sonarr.${HOSTNAME}`)
      - traefik.http.routers.sonarr.tls=true
      - traefik.http.routers.sonarr.tls.certresolver=myresolver
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
      - homepage.group=Media
      - homepage.name=Sonarr
      - homepage.icon=sonarr.png
      - homepage.href=http://sonarr.${HOSTNAME}/
      - homepage.description=Series management
      - homepage.weight=0
      - homepage.widget.type=sonarr
      - homepage.widget.url=http://sonarr:8989
      - homepage.widget.key=${SONARR_API_KEY}

  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./radarr:/config
      - ${DATA_ROOT}:/data
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`radarr.${HOSTNAME}`)
      - traefik.http.routers.radarr.tls=true
      - traefik.http.routers.radarr.tls.certresolver=myresolver
      - traefik.http.services.radarr.loadbalancer.server.port=7878
      - homepage.group=Media
      - homepage.name=Radarr
      - homepage.icon=radarr.png
      - homepage.href=http://radarr.${HOSTNAME}/
      - homepage.description=Movies management
      - homepage.weight=1
      - homepage.widget.type=radarr
      - homepage.widget.url=http://radarr:7878
      - homepage.widget.key=${RADARR_API_KEY}

  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./readarr:/config
      - ${DATA_ROOT}:/data
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.readarr.rule=Host(`readarr.${HOSTNAME}`)
      - traefik.http.routers.readarr.tls=true
      - traefik.http.routers.readarr.tls.certresolver=myresolver
      - traefik.http.services.readarr.loadbalancer.server.port=8787
      - homepage.group=Media
      - homepage.name=Readarr
      - homepage.icon=readarr.png
      - homepage.href=http://readarr.${HOSTNAME}/
      - homepage.description=Movies management
      - homepage.weight=1
      - homepage.widget.type=readarr
      - homepage.widget.url=http://readarr:8787
      - homepage.widget.key=${READARR_API_KEY}

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./prowlarr:/config
    restart: unless-stopped
    network_mode: "service:vpn"
    depends_on:
      vpn:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.${HOSTNAME}`)
      - traefik.http.routers.prowlarr.tls=true
      - traefik.http.routers.prowlarr.tls.certresolver=myresolver
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
      - homepage.group=Media
      - homepage.name=Prowlarr
      - homepage.icon=prowlarr.png
      - homepage.href=http://prowlarr.${HOSTNAME}/
      - homepage.description=Indexers management
      - homepage.weight=4
      - homepage.widget.type=prowlarr
      - homepage.widget.url=http://vpn:9696
      - homepage.widget.key=${PROWLARR_API_KEY}

  #
  # nordvpn, only used by prowlarr to access YGG in France
  #
  vpn:
    image: ghcr.io/bubuntux/nordvpn
    container_name: vpn
    volumes:
      - ./nordvpn:/config
    cap_add:
      - NET_ADMIN               # Required
      - NET_RAW                 # Required
    environment:                # Review https://github.com/bubuntux/nordvpn#environment-variables
      - TOKEN=${NORDVPN_TOKEN}  # Required
      - CONNECT=${NORDVPN_COUNTRY}
      - TECHNOLOGY=NordLynx
      - NET_LOCAL=192.168.1.0/24  # So it can be accessed within the local network
      # add docker dns to /etc/resolv.conf
      - POST_CONNECT="/config/resolv.conf.sh"
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1  # Recomended if using ipv4 only
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:libtorrentv1
    container_name: qbittorrent
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - WEBUI_PORT=8081
    volumes:
      - ./qbittorrent:/config
      - ${DOWNLOAD_ROOT}:/data/torrents
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.${HOSTNAME}`)
      - traefik.http.routers.qbittorrent.tls=true
      - traefik.http.routers.qbittorrent.tls.certresolver=myresolver
      - traefik.http.services.qbittorrent.loadbalancer.server.port=8081
      - homepage.group=Download
      - homepage.name=qBittorrent
      - homepage.icon=qbittorrent.png
      - homepage.href=http://qbittorrent.${HOSTNAME}/
      - homepage.description=Bittorrent client
      - homepage.weight=5
      - homepage.widget.type=qbittorrent
      - homepage.widget.url=http://qbittorrent:8081
      - homepage.widget.username=admin
      - homepage.widget.password=adminadmin

  kavita:
    image: kizaing/kavita:latest
    container_name: kavita
    volumes:
      - ./media/books:/books
      - ./kavita:/kavita/config
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.kavita.rule=Host(`kavita.${HOSTNAME}`)
      - traefik.http.routers.kavita.tls=true
      - traefik.http.routers.kavita.tls.certresolver=myresolver
      - traefik.http.services.kavita.loadbalancer.server.port=5000
      - homepage.group=Books
      - homepage.name=Kavita
      - homepage.icon=kavita.png
      - homepage.href=http://kavita.${HOSTNAME}/
      - homepage.description=Kavita
      - homepage.weight=3
      - homepage.widget.type=kavita
      - homepage.widget.url=http://kavita:5000
      - homepage.widget.username=${KAVITA_USERNAME}
      - homepage.widget.password=${KAVITA_PASSWORD}

  audiobookshelf:
    image: ghcr.io/advplyr/audiobookshelf:latest
    container_name: audiobookshelf
    environment:
      - PORT=13378
    volumes:
      - ./media/audiobooks:/audiobooks
      - ./audiobookshelf/config:/config
      - ./audiobookshelf/metadata:/metadata
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.audiobookshelf.rule=Host(`audiobookshelf.${HOSTNAME}`)
      - traefik.http.routers.audiobookshelf.tls=true
      - traefik.http.routers.audiobookshelf.tls.certresolver=myresolver
      - traefik.http.services.audiobookshelf.loadbalancer.server.port=13378
      - homepage.group=Books
      - homepage.name=Audiobookshelf
      - homepage.icon=audiobookshelf.png
      - homepage.href=http://audiobookshelf.${HOSTNAME}/
      - homepage.description=Audiobookshelf
      - homepage.weight=3
      - homepage.widget.type=audiobookshelf
      - homepage.widget.url=http://audiobookshelf:13378
      - homepage.widget.key=${AUDIOBOOKSHELF_API_KEY}

  jellyfin:
    image: lscr.io/linuxserver/jellyfin
    container_name: jellyfin
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - JELLYFIN_PublishedServerUrl={{ ansible_default_ipv4.address|default(ansible_all_ipv4_addresses[0]) }}
      - DOCKER_MODS=linuxserver/mods:jellyfin-opencl-intel
    volumes:
      - ./jellyfin:/config
      - ${DATA_ROOT}:/data
      - /mnt/Films:/mnt/Films
      - /mnt/Series:/mnt/Series
      - /mnt/Enfants:/mnt/Enfants
    ports:
      - "8096:8096/tcp"
      - "7359:7359/udp"
      - "1900:1900/udp"
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.rule=Host(`jellyfin.${HOSTNAME}`)
      - traefik.http.routers.jellyfin.tls=true
      - traefik.http.routers.jellyfin.tls.certresolver=myresolver
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
      - homepage.group=Jellyfin
      - homepage.name=Jellyfin
      - homepage.icon=jellyfin.png
      - homepage.href=http://jellyfin.${HOSTNAME}/
      - homepage.description=Jellyfin Media server
      - homepage.weight=3
      - homepage.widget.type=jellyfin
      - homepage.widget.url=http://jellyfin:8096
      - homepage.widget.key=${JELLYFIN_API_KEY}

  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
        - LOG_LEVEL=debug
        - TZ=${TIMEZONE}
    volumes:
      - ./jellyseerr:/app/config
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyseerr.rule=Host(`jellyseerr.${HOSTNAME}`)
      - traefik.http.routers.jellyseerr.tls=true
      - traefik.http.routers.jellyseerr.tls.certresolver=myresolver
      - traefik.http.services.jellyseerr.loadbalancer.server.port=5055
      - homepage.group=Jellyfin
      - homepage.name=Jellyseerr
      - homepage.icon=jellyseerr.png
      - homepage.href=http://jellyseerr.${HOSTNAME}/
      - homepage.description=Jellyfin companion
      - homepage.weight=3
      - homepage.widget.type=jellyseerr
      - homepage.widget.url=http://jellyseerr:5055
      - homepage.widget.key=${JELLYSEERR_API_KEY}

  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_TOKEN}
    volumes:
      - ./plex:/config
      - ./media:/mnt/local
      - /mnt/Films:/mnt/Films
      - /mnt/Series:/mnt/Series
      - /mnt/Enfants:/mnt/Enfants
    ports:
      - "3005:3005/tcp"
      - "8324:8324/tcp"
      - "32400:32400/tcp"
      - "32469:32469/tcp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.plex.rule=Host(`plex.${HOSTNAME}`)
      - traefik.http.routers.plex.tls=true
      - traefik.http.routers.plex.tls.certresolver=myresolver
      - traefik.http.services.plex.loadbalancer.server.port=32400
      - homepage.group=Plex
      - homepage.name=Plex
      - homepage.icon=plex.png
      - homepage.href=http://plex.${HOSTNAME}/
      - homepage.description=Plex Media server
      - homepage.weight=3
      - homepage.widget.type=plex
      - homepage.widget.url=http://plex:32400
      - homepage.widget.key=${PLEX_TOKEN}

  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    container_name: tautulli
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./tautulli:/config
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.tautulli.rule=Host(`tautulli.${HOSTNAME}`)
      - traefik.http.routers.tautulli.tls=true
      - traefik.http.routers.tautulli.tls.certresolver=myresolver
      - traefik.http.services.tautulli.loadbalancer.server.port=8181
      - homepage.group=Plex
      - homepage.name=Tautulli
      - homepage.icon=tautulli.png
      - homepage.href=http://tautulli.${HOSTNAME}/
      - homepage.description=Tautulli for Plex
      - homepage.weight=3
      - homepage.widget.type=tautulli
      - homepage.widget.url=http://tautulli:8181
      - homepage.widget.key=${TAUTULLI_API_KEY}

  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ./overseerr:/config
    ports:
      - 5055:5055
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.overseerr.rule=Host(`overseerr.${HOSTNAME}`)
      - traefik.http.routers.overseerr.tls=true
      - traefik.http.routers.overseerr.tls.certresolver=myresolver
      - traefik.http.services.overseerr.loadbalancer.server.port=5055
      - homepage.group=Plex
      - homepage.name=Overseerr
      - homepage.icon=overseerr.png
      - homepage.href=http://overseerr.${HOSTNAME}/
      - homepage.description=Overseerr for Plex
      - homepage.weight=3
      - homepage.widget.type=overseerr
      - homepage.widget.url=http://overseerr:5055
      - homepage.widget.key=${OVERSEERR_API_KEY}


  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    environment:
      - TZ=${TIMEZONE}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_NOTIFICATION_REPORT=true
      - WATCHTOWER_NOTIFICATION_URL=${WATCHTOWER_NOTIFICATION_URL}
      - WATCHTOWER_HTTP_API_METRICS=true
      - WATCHTOWER_HTTP_API_TOKEN=demotoken
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - homepage.group=Utilities
      - homepage.name=Watchtower
      - homepage.icon=watchtower.png
      - homepage.weight=3
      - homepage.widget.type=watchtower
      - homepage.widget.url=http://watchtower:8080
      - homepage.widget.key=demotoken


  #
  # photoprism
  #
  # to connect:
  # docker exec -it photoprism-mariadb mariadb --user root -proot
  mariadb:
    container_name: photoprism-mariadb
    image: mariadb:latest
    restart: unless-stopped
    stop_grace_period: 5s
    security_opt: # see https://github.com/MariaDB/mariadb-docker/issues/434#issuecomment-1136151239
      - seccomp:unconfined
      - apparmor:unconfined
    volumes:
      - ./photoprism/db:/var/lib/mysql
    environment:
      - TZ=${TIMEZONE}
      - MYSQL_ROOT_PASSWORD=${PHOTOPRISM_MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${PHOTOPRISM_MYSQL_DB}
      - MYSQL_USER=${PHOTOPRISM_MYSQL_USER}
      - MYSQL_PASSWORD=${PHOTOPRISM_MYSQL_PASSWORD}

  photoprism:
    container_name: photoprism
    image: photoprism/photoprism:latest
    restart: unless-stopped
    stop_grace_period: 10s
    depends_on:
      - mariadb
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    ports:
      - 2342:2342
    working_dir: "/photoprism"
    volumes:
      - ./photoprism/app:/photoprism
    environment:
      - TZ=US/Eastern
      - PHOTOPRISM_ADMIN_PASSWORD=${PHOTOPRISM_PASSWORD}
      - PHOTOPRISM_SITE_URL=http://photoprism.${HOSTNAME}
      - PHOTOPRISM_EXPERIMENTAL=false
      - PHOTOPRISM_HTTP_COMPRESSION=gzip
      - PHOTOPRISM_DATABASE_DRIVER=mysql
      - PHOTOPRISM_DATABASE_SERVER=mariadb:3306
      - PHOTOPRISM_AUTH_MODE="public"
      - PHOTOPRISM_DATABASE_NAME=${PHOTOPRISM_MYSQL_DB}
      - PHOTOPRISM_DATABASE_USER=${PHOTOPRISM_MYSQL_USER}
      - PHOTOPRISM_DATABASE_PASSWORD=${PHOTOPRISM_MYSQL_PASSWORD}
      - PHOTOPRISM_DISABLE_CHOWN=false
      - PHOTOPRISM_DISABLE_BACKUPS=true
      - PHOTOPRISM_DISABLE_WEBDAV=false
      - PHOTOPRISM_DETECT_NSFW=true
      - PHOTOPRISM_UPLOAD_NSFW=false
      - PHOTOPRISM_DEBUG=false
      - PHOTOPRISM_THUMB_FILTER=lanczos
      - PHOTOPRISM_THUMB_UNCACHED=true
      - PHOTOPRISM_THUMB_SIZE=2048
      - PHOTOPRISM_THUMB_SIZE_UNCACHED=7680
      - PHOTOPRISM_JPEG_SIZE=7680
      - PHOTOPRISM_JPEG_QUALITY=92
      - TF_CPP_MIN_LOG_LEVEL=0
      - PHOTOPRISM_FFMPEG_ENCODER=h264_qsv
      - PHOTOPRISM_FFMPEG_BUFFERS=64
      - PHOTOPRISM_INIT=intel tensorflow-amd64-avx2
    devices:
      - /dev/dri:/dev/dri
    labels:
      - traefik.enable=true
      - traefik.http.routers.photoprism.rule=Host(`photoprism.${HOSTNAME}`)
      - traefik.http.routers.photoprism.tls=true
      - traefik.http.routers.photoprism.tls.certresolver=myresolver
      - traefik.http.services.photoprism.loadbalancer.server.port=2342
      - homepage.group=Services
      - homepage.name=Photoprism
      - homepage.icon=photoprism.png
      - homepage.href=http://photoprism.${HOSTNAME}/
      - homepage.description=Media server
      - homepage.weight=3
      - homepage.widget.type=photoprism
      - homepage.widget.url=http://photoprism:2342
      - homepage.widget.username=admin
      - homepage.widget.password=${PHOTOPRISM_PASSWORD}



networks:
  default:
    name: docker-compose-nas
  adguard-macvlan:
    external: true
